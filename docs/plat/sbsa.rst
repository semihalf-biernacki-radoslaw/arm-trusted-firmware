Trusted Firmware-A for QEMU SBSA target
========================================

Trusted Firmware-A (TF-A) implements the EL3 firmware layer for QEMU SBSA
Armv8-A. Secure BootRom is supplied with -pflash argument. It is composed
from BL1 and FIT images at EDK2 compilation stage. Non-secure rom is also
given with -plash argument and contains of UEFI and EFI variables (also
composed at EDK2 compilation stage). Semihosting is not used.

When QEMU starts all CPUs are released simultaneously, BL1 selects a
primary CPU to handle the boot and the secondaries are placed in a polling
loop to be released by normal world via PSCI.

BL2 edits the Flattened Device Tree, FDT, generated by QEMU at run-time to
add a node describing PSCI and also enable methods for the CPUs.

An ARM64 defconfig v4.5 Linux kernel is known to boot, FDT doesn't need to be
provided as it's generated by QEMU.

Current limitations:

-  Only cold boot is supported
-  No instructions for how to load a BL32 (Secure Payload)

To build ATF:

::

    git clone https://github.com/ARM-software/arm-trusted-firmware.git atf
    cd atf
    export CROSS_COMPILE=aarch64-linux-gnu-
    make PLAT=sbsa all fip

Images will be placed at build/sbsa/release (bl1.bin and fip.bin).
Need to copy them into top directory for EDK2 compilation.

::

    cp build/sbsa/release/bl1.bin ../
    cp build/sbsa/release/fip.bin ../

To build EDK2:

::

    git clone https://github.com/tianocore/edk2.git edk2
    cd edk2
    make -C BaseTools
    export GCC5_AARCH64_PREFIX=aarch64-linux-gnu-
    . edksetup.sh

Edit Conf/target.txt
ACTIVE_PLATFORM       = ArmVirtPkg/ArmVirtSBSAQemu.dsc
TARGET_ARCH           = AARCH64
TARGET                = RELEASE
TOOL_CHAIN_TAG        = GCC5

:: 

    build -a AARCH64 -p ArmVirtPkg/ArmVirtQemuSBSA.dsc

Final FLASH0 and FLASH1 images will be placed at
Build/ArmVirtQemuSBSA-AARCH64/DEBUG_GCC5/FV/
We need to copy them to Qemu working directory (parent in below example).
Also Qemu requires both images given by pflash argument have size aligned to
flash memory map.

::

    cp Build/ArmVirtQemuSBSA-AARCH64/RELEASE_GCC5/FV/SBSA_FLASH0*.fd ../
    cd ..
    truncate -s 67108864 SBSA_FLASH0.fd
    truncate -s 67108864 SBSA_FLASH1.fd

To start QEMU:

- compile or install qemu with SBSA platform support
- create or download disk image with Linux installation (disk1.img)

::

    qemu-system-aarch64 -m 1024 -cpu cortex-a57 \
        -M sbsa,secure=on,virtualization=on,gic_version=3 \
        -pflash SBSA_FLASH0.fd -pflash SBSA_FLASH1.fd -serial stdio \
        -hda disk1.img

